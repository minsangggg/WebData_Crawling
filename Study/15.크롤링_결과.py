{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de05a40b",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'room_info.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 4\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;66;03m# CSV 파일 불러오기\u001b[39;00m\n\u001b[1;32m----> 4\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_csv\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mroom_info.csv\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mutf-8-sig\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;66;03m# 데이터 전체 확인\u001b[39;00m\n\u001b[0;32m      7\u001b[0m \u001b[38;5;28mprint\u001b[39m(df)\n",
      "File \u001b[1;32mc:\\Users\\Admin\\miniconda3\\envs\\webcrawl_env\\lib\\site-packages\\pandas\\io\\parsers\\readers.py:1026\u001b[0m, in \u001b[0;36mread_csv\u001b[1;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[0;32m   1013\u001b[0m kwds_defaults \u001b[38;5;241m=\u001b[39m _refine_defaults_read(\n\u001b[0;32m   1014\u001b[0m     dialect,\n\u001b[0;32m   1015\u001b[0m     delimiter,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1022\u001b[0m     dtype_backend\u001b[38;5;241m=\u001b[39mdtype_backend,\n\u001b[0;32m   1023\u001b[0m )\n\u001b[0;32m   1024\u001b[0m kwds\u001b[38;5;241m.\u001b[39mupdate(kwds_defaults)\n\u001b[1;32m-> 1026\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\Users\\Admin\\miniconda3\\envs\\webcrawl_env\\lib\\site-packages\\pandas\\io\\parsers\\readers.py:620\u001b[0m, in \u001b[0;36m_read\u001b[1;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[0;32m    617\u001b[0m _validate_names(kwds\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnames\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[0;32m    619\u001b[0m \u001b[38;5;66;03m# Create the parser.\u001b[39;00m\n\u001b[1;32m--> 620\u001b[0m parser \u001b[38;5;241m=\u001b[39m TextFileReader(filepath_or_buffer, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[0;32m    622\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m chunksize \u001b[38;5;129;01mor\u001b[39;00m iterator:\n\u001b[0;32m    623\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m parser\n",
      "File \u001b[1;32mc:\\Users\\Admin\\miniconda3\\envs\\webcrawl_env\\lib\\site-packages\\pandas\\io\\parsers\\readers.py:1620\u001b[0m, in \u001b[0;36mTextFileReader.__init__\u001b[1;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[0;32m   1617\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m kwds[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m   1619\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles: IOHandles \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m-> 1620\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\Users\\Admin\\miniconda3\\envs\\webcrawl_env\\lib\\site-packages\\pandas\\io\\parsers\\readers.py:1880\u001b[0m, in \u001b[0;36mTextFileReader._make_engine\u001b[1;34m(self, f, engine)\u001b[0m\n\u001b[0;32m   1878\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m mode:\n\u001b[0;32m   1879\u001b[0m         mode \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m-> 1880\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;241m=\u001b[39m \u001b[43mget_handle\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1881\u001b[0m \u001b[43m    \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1882\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1883\u001b[0m \u001b[43m    \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1884\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcompression\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcompression\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1885\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmemory_map\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmemory_map\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1886\u001b[0m \u001b[43m    \u001b[49m\u001b[43mis_text\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mis_text\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1887\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding_errors\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstrict\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1888\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstorage_options\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1889\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1890\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1891\u001b[0m f \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles\u001b[38;5;241m.\u001b[39mhandle\n",
      "File \u001b[1;32mc:\\Users\\Admin\\miniconda3\\envs\\webcrawl_env\\lib\\site-packages\\pandas\\io\\common.py:873\u001b[0m, in \u001b[0;36mget_handle\u001b[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[0;32m    868\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(handle, \u001b[38;5;28mstr\u001b[39m):\n\u001b[0;32m    869\u001b[0m     \u001b[38;5;66;03m# Check whether the filename is to be opened in binary mode.\u001b[39;00m\n\u001b[0;32m    870\u001b[0m     \u001b[38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.\u001b[39;00m\n\u001b[0;32m    871\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mencoding \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mmode:\n\u001b[0;32m    872\u001b[0m         \u001b[38;5;66;03m# Encoding\u001b[39;00m\n\u001b[1;32m--> 873\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[0;32m    874\u001b[0m \u001b[43m            \u001b[49m\u001b[43mhandle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    875\u001b[0m \u001b[43m            \u001b[49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    876\u001b[0m \u001b[43m            \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mencoding\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    877\u001b[0m \u001b[43m            \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    878\u001b[0m \u001b[43m            \u001b[49m\u001b[43mnewline\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m    879\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    880\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    881\u001b[0m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[0;32m    882\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(handle, ioargs\u001b[38;5;241m.\u001b[39mmode)\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'room_info.csv'"
     ]
    }
   ],
   "source": [
    "from playwright.sync_api import sync_playwright\n",
    "import time, re, requests, os, json\n",
    "import pymysql\n",
    "from datetime import datetime\n",
    "\n",
    "# -----------------------------\n",
    "# 전처리1: 기본 매물 정보\n",
    "# -----------------------------\n",
    "def parse_room_info(raw_text: str) -> dict:\n",
    "    room_info = {}\n",
    "\n",
    "    m2_match = re.search(r\"전용\\s*([\\d.]+)m²\", raw_text)\n",
    "    room_info[\"area_m2\"] = float(m2_match.group(1)) if m2_match else None\n",
    "\n",
    "    room_type_match = re.search(r\"(원룸|투룸|쓰리룸|오피스텔|분리형원룸)\", raw_text)\n",
    "    room_info[\"room_type\"] = room_type_match.group(1) if room_type_match else None\n",
    "\n",
    "    floor_match = re.search(r\"(\\d+)층/(\\d+)층\", raw_text)\n",
    "    if floor_match:\n",
    "        room_info[\"floor\"] = int(floor_match.group(1))\n",
    "        room_info[\"total_floor\"] = int(floor_match.group(2))\n",
    "    else:\n",
    "        room_info[\"floor\"], room_info[\"total_floor\"] = None, None\n",
    "\n",
    "    room_info[\"parking\"] = 0 if \"주차 불가능\" in raw_text else 1 if \"주차 가능\" in raw_text else None\n",
    "\n",
    "    move_in_match = re.search(r\"(\\d{4}\\.\\s*\\d{2}\\.\\s*\\d{2})\", raw_text)\n",
    "    if move_in_match:\n",
    "        date_str = re.sub(r\"\\s+\", \"\", move_in_match.group(1))\n",
    "        room_info[\"move_in_date\"] = datetime.strptime(date_str, \"%Y.%m.%d\").date()\n",
    "    else:\n",
    "        room_info[\"move_in_date\"] = None\n",
    "\n",
    "    direction_match = re.search(r\"(동향|서향|남향|북향)\", raw_text)\n",
    "    room_info[\"direction\"] = direction_match.group(1) if direction_match else None\n",
    "\n",
    "    room_info[\"elevator\"] = 1 if \"엘리베이터 있음\" in raw_text else 0\n",
    "\n",
    "    building_type_match = re.search(r\"(주택|오피스텔|근린생활시설[^\\n]*)\", raw_text)\n",
    "    room_info[\"building_type\"] = building_type_match.group(1) if building_type_match else None\n",
    "\n",
    "    built_match = re.search(r\"(\\d{8}) 준공\", raw_text)\n",
    "    if built_match:\n",
    "        room_info[\"built_year\"] = datetime.strptime(built_match.group(1), \"%Y%m%d\").date()\n",
    "    else:\n",
    "        room_info[\"built_year\"] = None\n",
    "\n",
    "    addr_match = re.search(r\"[가-힣]+\\s+[가-힣]+\\s+[가-힣]+\\s+\\d+-?\\d*\", raw_text)\n",
    "    room_info[\"address\"] = addr_match.group(0) if addr_match else None\n",
    "\n",
    "    reg_no_match = re.search(r\"등록번호\\s*(\\d+)\", raw_text)\n",
    "    room_info[\"reg_no\"] = int(reg_no_match.group(1)) if reg_no_match else None\n",
    "\n",
    "    violation_match = re.search(r\"위반건축물 여부:\\s*([^\\n]+)\", raw_text)\n",
    "    room_info[\"violation\"] = violation_match.group(1).strip() if violation_match else None\n",
    "\n",
    "    return room_info\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# 전처리2: 옵션 정보\n",
    "# -----------------------------\n",
    "def parse_options(option_list: list) -> dict:\n",
    "    option_flags = {\n",
    "        \"에어컨\": 0, \"세탁기\": 0, \"냉장고\": 0,\n",
    "        \"옷장\": 0, \"인덕션\": 0, \"책상\": 0,\n",
    "        \"전자레인지\": 0, \"TV\": 0, \"가스레인지\": 0, \"신발장\": 0\n",
    "    }\n",
    "    for opt in option_list:\n",
    "        for key in option_flags.keys():\n",
    "            if key in opt:\n",
    "                option_flags[key] = 1\n",
    "    return option_flags\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# DB 적재 함수\n",
    "# -----------------------------\n",
    "def insert_room_info(room_data, image_list):\n",
    "    conn = pymysql.connect(\n",
    "        host=\"localhost\",\n",
    "        user=\"lguplus7\",\n",
    "        password=\"lg7p@ssw0rd~!\",  # 실제 비밀번호\n",
    "        db=\"cp_data\",\n",
    "        charset=\"utf8mb4\",\n",
    "        port=3310\n",
    "    )\n",
    "    cursor = conn.cursor()\n",
    "\n",
    "    sql_info = \"\"\"\n",
    "    INSERT INTO room_info\n",
    "    (url, area_m2, room_type, floor, total_floor, parking, move_in_date, \n",
    "     direction, elevator, building_type, built_year, address, reg_no, violation, options)\n",
    "    VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)\n",
    "    \"\"\"\n",
    "    cursor.execute(sql_info, (\n",
    "        room_data[\"url\"], room_data[\"area_m2\"], room_data[\"room_type\"],\n",
    "        room_data[\"floor\"], room_data[\"total_floor\"], room_data[\"parking\"],\n",
    "        room_data[\"move_in_date\"], room_data[\"direction\"], room_data[\"elevator\"],\n",
    "        room_data[\"building_type\"], room_data[\"built_year\"], room_data[\"address\"],\n",
    "        room_data[\"reg_no\"], room_data[\"violation\"], json.dumps(room_data[\"options\"], ensure_ascii=False)\n",
    "    ))\n",
    "    room_id = cursor.lastrowid\n",
    "\n",
    "    sql_img = \"INSERT INTO room_images (room_id, image_path) VALUES (%s, %s)\"\n",
    "    for img in image_list:\n",
    "        cursor.execute(sql_img, (room_id, img))\n",
    "\n",
    "    conn.commit()\n",
    "    cursor.close()\n",
    "    conn.close()\n",
    "    print(\"✅ DB 적재 완료:\", room_data[\"url\"])\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# 크롤링 + 전처리 통합\n",
    "# -----------------------------\n",
    "def scrape_and_preprocess(url):\n",
    "    with sync_playwright() as p:\n",
    "        browser = p.chromium.launch(headless=True)\n",
    "        context = browser.new_context(\n",
    "            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'\n",
    "        )\n",
    "        page = context.new_page()\n",
    "        page.goto(url, wait_until='domcontentloaded', timeout=30000)\n",
    "        time.sleep(5)\n",
    "\n",
    "        # 기본 정보 텍스트\n",
    "        first_detail_selector = 'div:nth-child(2) > div:nth-child(2) > div > div.css-1dbjc4n.r-150rngu.r-14lw9ot.r-eqz5dr.r-16y2uox.r-1wbh5a2.r-11yh6sk.r-1rnoaur.r-1sncvnh > div'\n",
    "        first_detail_elements = page.query_selector_all(first_detail_selector)\n",
    "        first_text = \"\\n\".join([elem.inner_text() for elem in first_detail_elements]) if first_detail_elements else \"\"\n",
    "\n",
    "        # 옵션 텍스트\n",
    "        final_detail_selector = 'div.css-1dbjc4n.r-150rngu.r-14lw9ot.r-eqz5dr.r-16y2uox.r-1wbh5a2.r-11yh6sk.r-1rnoaur.r-1sncvnh > div'\n",
    "        final_detail_elements = page.query_selector_all(final_detail_selector)\n",
    "        option_list = [elem.inner_text() for elem in final_detail_elements] if final_detail_elements else []\n",
    "\n",
    "        # 이미지 저장\n",
    "        image_selector = 'img[src*=\"items/\"]'\n",
    "        image_elements = page.query_selector_all(image_selector)\n",
    "        excluded_pattern = re.compile(r'w=(400|800)&h=(300|600)')\n",
    "        if not os.path.exists(\"./img\"):\n",
    "            os.makedirs(\"./img\")\n",
    "\n",
    "        image_list = []\n",
    "        for i, img_elem in enumerate(image_elements, 1):\n",
    "            img_url = img_elem.get_attribute('src')\n",
    "            if img_url and re.search(r'items/', img_url) and not excluded_pattern.search(img_url):\n",
    "                img_path = f\"./img/image_{i}.jpg\"\n",
    "                img_data = requests.get(img_url).content\n",
    "                with open(img_path, 'wb') as f:\n",
    "                    f.write(img_data)\n",
    "                image_list.append(img_path)\n",
    "\n",
    "        browser.close()\n",
    "\n",
    "    # 전처리\n",
    "    room_data = parse_room_info(first_text)\n",
    "    room_data[\"url\"] = url\n",
    "    room_data[\"options\"] = parse_options(option_list)\n",
    "\n",
    "    return room_data, image_list\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# 실행부\n",
    "# -----------------------------\n",
    "if __name__ == \"__main__\":\n",
    "    urls = [\n",
    "        \"https://www.zigbang.com/home/oneroom/items/46013854\",\n",
    "        \"https://www.zigbang.com/home/oneroom/items/45998569\",\n",
    "        \"https://www.zigbang.com/home/oneroom/items/45991434\"\n",
    "    ]\n",
    "\n",
    "    for url in urls:\n",
    "        room_data, image_list = scrape_and_preprocess(url)\n",
    "        insert_room_info(room_data, image_list)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "webcrawl_env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
